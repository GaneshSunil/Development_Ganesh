@model GenomeNext.Data.EntityModel.GNInvoiceDetail

@{
    ViewBag.Title = "Edit Invoice Detail";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <h2>
        <span class="glyphicon glyphicon-euro gn-green"></span>
        @ViewBag.Title

        <span class="pull-right">
            @Html.BootstrapActionButton("Back to Invoice", "Edit", "Invoices", new RouteValueDictionary(new { id = Model.GNInvoiceId }), "info", "chevron-left")
            @Html.BootstrapFormSaveButton()
        </span>
    </h2>

    @Html.BootstrapRowSpacer()
    
    <div class="form-horizontal">
        <h4>GNInvoiceDetail</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.CreatedBy)
        @Html.HiddenFor(model => model.CreateDateTime)

        <div class="form-group">
            @Html.LabelFor(model => model.Invoice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Invoice.Name)
                @Html.HiddenFor(model => model.GNInvoiceId)
                @Html.ValidationMessageFor(model => model.GNInvoiceId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitCost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UnitCost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UnitCost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DiscountAmount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.DiscountType == GenomeNext.Data.EntityModel.GNAccount.DiscountType.PERCENT.GetCode())
                {
                    @Html.DisplayFor(model => model.DiscountAmount)<span>%</span>
                }
                else
                {
                    <span>$</span>@Html.DisplayFor(model => model.DiscountAmount)
                }
                @Html.HiddenFor(model => model.DiscountAmount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.DiscountType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DiscountAmount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SubTotal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SubTotal, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SubTotal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Total, "", new { @class = "text-danger" })
            </div>
        </div>

        @{
            ViewData["ViewMode"] = "Edit";
            ViewData["CreatedBy"] = Model.CreatedByContact;
            ViewData["CreateDateTime"] = Model.CreateDateTime;
        }
        @Html.Partial("_AuditModelPartial", null, ViewData)

        <div class="form-group">
            @Html.LabelFor(model => model.Transactions, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                <p>
                    @Html.BootstrapActionButton("Enter Transaction", "Create", "Transactions", new RouteValueDictionary(new { invoiceDetailId = Model.Id }), "info", "plus", "sm")
                </p>

                @if (Model.Transactions != null && Model.Transactions.Count != 0)
                {
                    <div class="table-responsive">
                        <table class="table table-hover table-bordered table-gn">
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.Transactions.FirstOrDefault().CreateDateTime)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Transactions.FirstOrDefault().TransactionType)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Transactions.FirstOrDefault().Description)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Transactions.FirstOrDefault().Product)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Transactions.FirstOrDefault().ValueUsed)
                                </th>
                                <th class="col-md-3"></th>
                            </tr>

                            @foreach (var item in Model.Transactions.OrderByDescending(id => id.CreateDateTime))
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.CreateDateTime)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.TransactionType.Name)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Description)
                                    </td>
                                    <td>
                                        @if (item.Product != null)
                                        {
                                            @Html.DisplayFor(modelItem => item.Product.Name)
                                        }
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ValueUsed)
                                        @Html.DisplayFor(modelItem => item.ValueUnits)
                                    </td>
                                    <td class="text-center">
                                        @Html.BootstrapActionButton("View", "Details", "Transactions", new RouteValueDictionary(new { id = item.Id, invoiceDetailId = Model.Id }), "success", "th", "sm")
                                        @Html.BootstrapActionButton("Edit", "Edit", "Transactions", new RouteValueDictionary(new { id = item.Id, invoiceDetailId = Model.Id }), "warning", "cog", "sm")
                                        @Html.BootstrapActionButton("Delete", "Delete", "Transactions", new RouteValueDictionary(new { id = item.Id, invoiceDetailId = Model.Id }), "danger", "trash", "sm")
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-12">
                            No transactions exist for this Invoice Detail record.
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}